#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from today import TodayInternalApiService
from today.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  int post_create(int user_id, string text)'
  print '  Post post_get(int user_id, int post_id)'
  print '   post_list(int user_id)'
  print '  bool post_delete(int user_id, int post_id)'
  print '  bool post_comment_create(int user_id, int post_id, string text)'
  print '   post_comment_list(int user_id, int post_id)'
  print '  bool post_comment_delete(int user_id, int post_id, int comment_id)'
  print '   friend_ids(int user_id)'
  print '  bool friend_remove(int actor_id, int target_id)'
  print '   friendship_incoming(int user_id)'
  print '   friendship_outgoing(int user_id)'
  print '  bool friendship_create(int actor_id, int target_id)'
  print '  bool friendship_cancel(int actor_id, int target_id)'
  print '  bool friendship_accept(int actor_id, int target_id)'
  print '  bool friendship_reject(int actor_id, int target_id)'
  print '  User users_get(int user_id)'
  print '  User users_get_by_username(string username)'
  print '   timeline_home(int actor_id)'
  print '   timeline_user(int actor_id)'
  print '  bool system_reset_fixtures()'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = TodayInternalApiService.Client(protocol)
transport.open()

if cmd == 'post_create':
  if len(args) != 2:
    print 'post_create requires 2 args'
    sys.exit(1)
  pp.pprint(client.post_create(eval(args[0]),args[1],))

elif cmd == 'post_get':
  if len(args) != 2:
    print 'post_get requires 2 args'
    sys.exit(1)
  pp.pprint(client.post_get(eval(args[0]),eval(args[1]),))

elif cmd == 'post_list':
  if len(args) != 1:
    print 'post_list requires 1 args'
    sys.exit(1)
  pp.pprint(client.post_list(eval(args[0]),))

elif cmd == 'post_delete':
  if len(args) != 2:
    print 'post_delete requires 2 args'
    sys.exit(1)
  pp.pprint(client.post_delete(eval(args[0]),eval(args[1]),))

elif cmd == 'post_comment_create':
  if len(args) != 3:
    print 'post_comment_create requires 3 args'
    sys.exit(1)
  pp.pprint(client.post_comment_create(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'post_comment_list':
  if len(args) != 2:
    print 'post_comment_list requires 2 args'
    sys.exit(1)
  pp.pprint(client.post_comment_list(eval(args[0]),eval(args[1]),))

elif cmd == 'post_comment_delete':
  if len(args) != 3:
    print 'post_comment_delete requires 3 args'
    sys.exit(1)
  pp.pprint(client.post_comment_delete(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'friend_ids':
  if len(args) != 1:
    print 'friend_ids requires 1 args'
    sys.exit(1)
  pp.pprint(client.friend_ids(eval(args[0]),))

elif cmd == 'friend_remove':
  if len(args) != 2:
    print 'friend_remove requires 2 args'
    sys.exit(1)
  pp.pprint(client.friend_remove(eval(args[0]),eval(args[1]),))

elif cmd == 'friendship_incoming':
  if len(args) != 1:
    print 'friendship_incoming requires 1 args'
    sys.exit(1)
  pp.pprint(client.friendship_incoming(eval(args[0]),))

elif cmd == 'friendship_outgoing':
  if len(args) != 1:
    print 'friendship_outgoing requires 1 args'
    sys.exit(1)
  pp.pprint(client.friendship_outgoing(eval(args[0]),))

elif cmd == 'friendship_create':
  if len(args) != 2:
    print 'friendship_create requires 2 args'
    sys.exit(1)
  pp.pprint(client.friendship_create(eval(args[0]),eval(args[1]),))

elif cmd == 'friendship_cancel':
  if len(args) != 2:
    print 'friendship_cancel requires 2 args'
    sys.exit(1)
  pp.pprint(client.friendship_cancel(eval(args[0]),eval(args[1]),))

elif cmd == 'friendship_accept':
  if len(args) != 2:
    print 'friendship_accept requires 2 args'
    sys.exit(1)
  pp.pprint(client.friendship_accept(eval(args[0]),eval(args[1]),))

elif cmd == 'friendship_reject':
  if len(args) != 2:
    print 'friendship_reject requires 2 args'
    sys.exit(1)
  pp.pprint(client.friendship_reject(eval(args[0]),eval(args[1]),))

elif cmd == 'users_get':
  if len(args) != 1:
    print 'users_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.users_get(eval(args[0]),))

elif cmd == 'users_get_by_username':
  if len(args) != 1:
    print 'users_get_by_username requires 1 args'
    sys.exit(1)
  pp.pprint(client.users_get_by_username(args[0],))

elif cmd == 'timeline_home':
  if len(args) != 1:
    print 'timeline_home requires 1 args'
    sys.exit(1)
  pp.pprint(client.timeline_home(eval(args[0]),))

elif cmd == 'timeline_user':
  if len(args) != 1:
    print 'timeline_user requires 1 args'
    sys.exit(1)
  pp.pprint(client.timeline_user(eval(args[0]),))

elif cmd == 'system_reset_fixtures':
  if len(args) != 0:
    print 'system_reset_fixtures requires 0 args'
    sys.exit(1)
  pp.pprint(client.system_reset_fixtures())

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
